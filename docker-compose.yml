version: '3.8'

services:
  # API Gateway
  kong:
    image: kong:3.4
    container_name: sureguard-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_CASSANDRA_CONTACT_POINTS: kong-database
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
    depends_on:
      - postgres
    networks:
      - sureguard-network

  # Main Application
  sureguard-app:
    build: .
    container_name: sureguard-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sureguard
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - postgres
      - redis
      - kafka
      - elasticsearch
    networks:
      - sureguard-network

  # Authentication Service
  auth-service:
    build: ./services/auth-service
    container_name: sureguard-auth
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sureguard
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - sureguard-network

  # ML Service
  ml-service:
    build: ./services/ml-service
    container_name: sureguard-ml
    ports:
      - "8080:8080"
    environment:
      - PYTHONPATH=/app
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./models:/app/models
    depends_on:
      - redis
    networks:
      - sureguard-network

  # Threat Detection Service
  threat-detection-service:
    build: ./services/threat-detection-service
    container_name: sureguard-threat-detection
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sureguard
      - REDIS_URL=redis://redis:6379
      - ML_SERVICE_URL=http://ml-service:8080
    depends_on:
      - postgres
      - redis
      - ml-service
    networks:
      - sureguard-network

  # Analytics Service
  analytics-service:
    build: ./services/analytics-service
    container_name: sureguard-analytics
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - CLICKHOUSE_URL=http://clickhouse:8123
      - REDIS_URL=redis://redis:6379
    depends_on:
      - clickhouse
      - redis
    networks:
      - sureguard-network

  # User Management Service
  user-service:
    build: ./services/user-service
    container_name: sureguard-user
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sureguard
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - sureguard-network

  # Notification Service
  notification-service:
    build: ./services/notification-service
    container_name: sureguard-notification
    ports:
      - "3005:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sureguard
      - REDIS_URL=redis://redis:6379
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - sureguard-network

  # Reporting Service
  reporting-service:
    build: ./services/reporting-service
    container_name: sureguard-reporting
    ports:
      - "3006:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sureguard
      - S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
    networks:
      - sureguard-network

  # Integration Service
  integration-service:
    build: ./services/integration-service
    container_name: sureguard-integration
    ports:
      - "3007:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sureguard
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - sureguard-network

  # Data Pipeline Service
  data-pipeline-service:
    build: ./services/data-pipeline-service
    container_name: sureguard-data-pipeline
    ports:
      - "3008:3000"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
      - CLICKHOUSE_URL=http://clickhouse:8123
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - kafka
      - clickhouse
      - elasticsearch
    networks:
      - sureguard-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: sureguard-postgres
    environment:
      POSTGRES_DB: sureguard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sureguard-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sureguard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sureguard-network

  # ClickHouse for Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: sureguard-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./scripts/clickhouse-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sureguard-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: sureguard-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - sureguard-network

  # Kafka for Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: sureguard-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sureguard-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: sureguard-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - sureguard-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: sureguard-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sureguard-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: sureguard-grafana
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sureguard-network

  # Jaeger for Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: sureguard-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - sureguard-network

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  sureguard-network:
    driver: bridge
